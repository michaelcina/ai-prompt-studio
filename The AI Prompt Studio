import React, { useState, useEffect, useRef } from 'react';

// --- SVG Icons ---
const CopyIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
        <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zM9 2H7v.5a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5V2z"/>
    </svg>
);

const InfoIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.055.491.223.552.372.06.15.026.302-.12.438-.145.137-.37.233-.665.233-.296 0-.52-.096-.665-.233-.146-.136-.18-.288-.12-.438.06-.149.258-.317.552-.372l.45-.083-.082-.38-2.29-.287A1.76 1.76 0 0 0 4 8.25c0 .966.784 1.75 1.75 1.75S7.5 9.216 7.5 8.25c0-.966-.784-1.75-1.75-1.75-.118 0-.233.012-.344.035l.438.544a.63.63 0 0 1 .152.375zM8 5.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
    </svg>
);

const DragHandleIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="cursor-grab" viewBox="0 0 16 16">
        <path d="M7 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM4 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
    </svg>
);

const SparkleIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 0a1 1 0 0 1 1 1v2.069l1.44.96a1 1 0 0 1 .44 1.24l-.485 1.213a1 1 0 0 1-1.24.44L8 6.485V8a1 1 0 0 1-1-1V4.272l-1.44-.96a1 1 0 0 1-.44-1.24l.485-1.213a1 1 0 0 1 1.24-.44L7 3.069V1a1 1 0 0 1 1-1zM4.157 5.843a1 1 0 0 1 .03.03l1.213.485a1 1 0 0 1 .44 1.24L4.355 9.04a1 1 0 0 1-1.24.44l-.96-1.44a1 1 0 0 1-.03-.03L.91 6.8a1 1 0 0 1 .44-1.24l1.213-.485a1 1 0 0 1 1.24.44l.353.528zM11.843 5.843a1 1 0 0 1 .03.03l1.213.485a1 1 0 0 1 .44 1.24l-1.485 2.228a1 1 0 0 1-1.24.44l-.96-1.44a1 1 0 0 1-.03-.03L8.57 6.8a1 1 0 0 1 .44-1.24l1.213-.485a1 1 0 0 1 1.24.44l.353.528zM16 8a1 1 0 0 1-1 1h-2.069l-.96 1.44a1 1 0 0 1-1.24.44l-1.213-.485a1 1 0 0 1-.44-1.24L9.515 8H8a1 1 0 0 1 0-2h1.728l.96-1.44a1 1 0 0 1 1.24-.44l1.213.485a1 1 0 0 1 .44 1.24L12.069 7H15a1 1 0 0 1 1 1zM.5 8a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0v-1a.5.5 0 0 1 .5-.5zm2 0a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0v-1a.5.5 0 0 1 .5-.5z"/>
    </svg>
);


// --- Reusable Tooltip Component ---
const Tooltip = ({ text, children }) => {
    return (
        <div className="relative flex items-center group">
            {children}
            <div className="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs p-2 bg-slate-600 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none z-10">
                {text}
            </div>
        </div>
    );
};


// --- Example Templates Data ---
const initialTemplates = [
    {
        id: 2,
        name: 'Summarize Text',
        description: 'Condense a block of text into key points.',
        settings: {
            objective: 'Summarize the following text into three key bullet points.',
            format: 'Bullet List',
            constraints: { tone: 'Formal', persona: 'A Research Assistant', wordLimit: '50' }
        },
        example: {
            input: 'The James Webb Space Telescope (JWST) is a space telescope designed primarily to conduct infrared astronomy. As the largest optical telescope in space, it is equipped with high-resolution and high-sensitivity instruments, allowing it to view objects too old, distant, or faint for the Hubble Space Telescope.',
            output: '- The JWST is a large infrared space telescope.\n- It can observe objects that Hubble cannot see.\n- Its primary function is to study the early universe.'
        }
    },
    {
        id: 3,
        name: 'Draft an Email',
        description: 'Write a professional email for a specific purpose.',
        settings: {
            objective: "Draft a professional email to a colleague asking for an update on the Q3 report.",
            format: 'Narrative',
            constraints: { tone: 'Formal', persona: 'A Project Manager', wordLimit: '100' }
        },
        example: {
            input: "Colleague's Name: Sarah\nMy Name: Alex",
            output: "Subject: Quick Question re: Q3 Report\n\nHi Sarah,\n\nHope you're having a productive week.\n\nI was just wondering if you had a moment to share a quick update on the status of the Q3 report. I need to provide a timeline estimate to leadership by the end of the day.\n\nNo pressure at all, just a brief status would be perfect.\n\nThanks,\nAlex"
        }
    },
    {
        id: 7,
        name: 'Explain Code',
        description: 'Explain what a block of code does.',
        settings: {
            objective: "Explain the following Python code snippet in simple terms, describing what it does and why it's useful.",
            format: 'Markdown',
            constraints: { tone: 'Informative', persona: 'A Senior Software Developer', wordLimit: '150' }
        },
        example: {
            input: "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
            output: "This Python function calculates the **factorial** of a number.\n\n* It takes a number `n` as input.\n* If `n` is 0, it returns 1 (the base case).\n* Otherwise, it multiplies `n` by the factorial of `n-1`. This is a classic example of **recursion**, where a function calls itself to solve a smaller version of the same problem."
        }
    },
    {
        id: 12,
        name: 'Classify Text',
        description: 'Categorize text into predefined labels.',
        settings: {
            objective: "Classify the following customer support ticket into one of the following categories: 'Billing', 'Technical Issue', or 'General Inquiry'.",
            format: 'Narrative',
            constraints: { tone: 'Neutral', persona: 'A Support Ticket Routing System', wordLimit: '' }
        },
        example: {
            input: "Hi, my internet connection keeps dropping. I've tried restarting my router but it's not helping.",
            output: "Technical Issue"
        }
    },
    {
        id: 13,
        name: 'Refactor Code',
        description: 'Improve the structure and efficiency of code.',
        settings: {
            objective: "Refactor the given Python code snippet to be more efficient and readable, following best practices. Add comments explaining the changes.",
            format: 'Python Code',
            constraints: { tone: 'Technical', persona: 'An Expert Software Architect', wordLimit: '' }
        },
        example: {
            input: "numbers = [1, 2, 3, 4, 5]\nsquared_numbers = []\nfor num in numbers:\n    squared_numbers.append(num * num)",
            output: "# Use a list comprehension for a more concise and Pythonic solution.\nsquared_numbers = [num * num for num in numbers]"
        }
    },
    {
        id: 5,
        name: 'Marketing Slogan',
        description: 'Generate catchy slogans for a product.',
        settings: {
            objective: "Generate 5 catchy marketing slogans for the product described.",
            format: 'Bullet List',
            constraints: { tone: 'Energetic', persona: 'A Marketing Expert', wordLimit: '' }
        },
        example: {
            input: "A new brand of coffee that is organic and sustainably sourced.",
            output: "- Sip Sustainably. Taste the Difference.\n- Your Morning, Mindfully Sourced.\n- Go Organic. Go for Greatness.\n- The Planet's Favorite Coffee.\n- Pure, Potent, Planet-Friendly."
        }
    },
    {
        id: 6,
        name: 'Translate Text',
        description: 'Translate text from one language to another.',
        settings: {
            objective: "Translate the following English text to French.",
            format: 'Narrative',
            constraints: { tone: 'Neutral', persona: 'A Professional Translator', wordLimit: '' }
        },
        example: {
            input: "Hello, how are you today? I hope you have a wonderful day.",
            output: "Bonjour, comment allez-vous aujourd'hui? J'espère que vous passez une merveilleuse journée."
        }
    },
    {
        id: 8,
        name: 'Recipe Generator',
        description: 'Create a simple recipe from a list of ingredients.',
        settings: {
            objective: "Create a simple recipe that includes the listed ingredients. Provide a name, a short description, an ingredient list, and step-by-step instructions.",
            format: 'Markdown',
            constraints: { tone: 'Friendly', persona: 'A Chef', wordLimit: '' }
        },
        example: {
            input: "Chicken breast, rice, broccoli, soy sauce",
            output: "### Simple Chicken & Broccoli Stir-fry\n\nA quick and healthy weeknight meal that's packed with flavor!\n\n**Ingredients:**\n- 1 chicken breast, cubed\n- 1 cup cooked rice\n- 1 head of broccoli, cut into florets\n- 2 tbsp soy sauce\n- 1 tbsp olive oil\n\n**Instructions:**\n1.  Heat olive oil in a pan over medium-high heat.\n2.  Add the cubed chicken and cook until golden brown.\n3.  Add the broccoli florets and stir-fry for 3-4 minutes until tender-crisp.\n4.  Stir in the soy sauce and cooked rice. Mix well and serve immediately."
        }
    },
    {
        id: 9,
        name: 'Role-Play a Character',
        description: 'Interact with the AI as a specific character.',
        settings: {
            objective: "You are a pirate captain named 'Salty' Sea-Dog. Respond to the user's questions as this character.",
            format: 'Narrative',
            constraints: { tone: 'Boisterous', persona: 'A Pirate Captain', wordLimit: '' }
        },
        example: {
            input: "Where is the best place to find treasure?",
            output: "Arrr, matey! Treasure ain't found on any map! It be found in the heart of adventure, on islands shrouded in mist, and in the glint of a rival captain's eye! But if ye be lookin' for gold, the Sunken Galleon of the Serpent's Spine is a mighty fine place to start... if ye dare!"
        }
    },
    {
        id: 10,
        name: 'Brainstorming Ideas',
        description: 'Generate creative ideas for a topic.',
        settings: {
            objective: "Brainstorm 5 unique and innovative app ideas to help people learn a new skill.",
            format: 'Bullet List',
            constraints: { tone: 'Creative', persona: 'An Innovation Consultant', wordLimit: '' }
        },
        example: {
            input: "Learning a new skill.",
            output: "- An AR app that overlays instructions on real-world objects (e.g., showing you how to fix a bike).\n- A gamified app that turns daily chores into skill-building quests.\n- A 'skill-swapping' platform where users can trade lessons with each other.\n- A micro-learning app that sends you one 60-second lesson per day.\n- An AI-powered mentor that creates a personalized learning path based on your goals."
        }
    },
    {
        id: 11,
        name: 'Extract Data (CSV)',
        description: 'Pull structured data from unstructured text.',
        settings: {
            objective: "Extract the name, email, and company from the following text and format it as a CSV row.",
            format: 'CSV',
            constraints: { tone: 'Neutral', persona: 'A Data Entry Specialist', wordLimit: '' }
        },
        example: {
            input: "Contact person: John Doe. You can reach him at john.doe@example.com. He works for Acme Corporation.",
            output: "Name,Email,Company\nJohn Doe,john.doe@example.com,Acme Corporation"
        }
    },
    {
        id: 1,
        name: 'Sentiment Analysis (JSON)',
        description: 'Extract sentiment and key aspects from text.',
        settings: {
            objective: 'Analyze the sentiment of user feedback, identifying positive and negative aspects.',
            format: 'JSON',
            constraints: { tone: 'Neutral', persona: 'A Data Analyst', wordLimit: '' }
        },
        example: {
            input: 'The new phone has an amazing camera, but the battery life is disappointing.',
            output: '{\n  "sentiment": "mixed",\n  "positive_aspect": "amazing camera",\n  "negative_aspect": "disappointing battery life"\n}'
        }
    },
];

// --- Safer Sanitize and Render Component ---
const SanitizeMessage = ({ text }) => {
    const parts = text.split(/\*\*(.*?)\*\*/g);
    return (
        <>
            {parts.map((part, i) =>
                i % 2 === 1 ? <strong key={i}>{part}</strong> : <span key={i}>{part}</span>
            )}
        </>
    );
};


// Main App Component
const App = () => {
    // --- STATE MANAGEMENT ---
    const [wizardStep, setWizardStep] = useState(0); // 0: initial, 1: form
    const [wizardMessage, setWizardMessage] = useState('');
    const [showAllTemplates, setShowAllTemplates] = useState(false);
    const [templates, setTemplates] = useState(initialTemplates);
    const [objective, setObjective] = useState('');
    const [domain, setDomain] = useState('');
    const [format, setFormat] = useState('Markdown');
    const [constraints, setConstraints] = useState({ tone: 'Neutral', persona: 'An Expert', wordLimit: '' });
    const [examples, setExamples] = useState([]);
    const [finalInput, setFinalInput] = useState('');
    const [generatedPrompt, setGeneratedPrompt] = useState('');
    const [testResult, setTestResult] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isGeneratingExample, setIsGeneratingExample] = useState(false);
    const [error, setError] = useState('');
    const [showCopySuccess, setShowCopySuccess] = useState(false);
    const [showDisclaimer, setShowDisclaimer] = useState(false);
    const [showUserGuide, setShowUserGuide] = useState(false);
    
    // --- Drag and Drop State ---
    const dragItem = useRef();
    const dragOverItem = useRef();

    // --- PROMPT GENERATION LOGIC ---
    useEffect(() => {
        const buildPrompt = () => {
            let prompt = `You are an AI assistant. Your persona is that of ${constraints.persona}.\n\n`;
            prompt += `--- GOAL ---\n`;
            prompt += `${objective || "[Specify the desired outcome or deliverable here]"}\n\n`;
            if (domain) {
                prompt += `--- CONTEXT ---\n`;
                prompt += `This task is within the ${domain} domain. Use relevant terminology and logic.\n\n`;
            }
            prompt += `--- RULES ---\n`;
            prompt += `- Output format MUST be ${format}.\n`;
            prompt += `- The tone of the response must be ${constraints.tone}.\n`;
            if (constraints.wordLimit) {
                prompt += `- The response must be approximately ${constraints.wordLimit} words.\n`;
            }
            prompt += `- Strictly adhere to all rules.\n\n`;
            const validExamples = examples.filter(ex => ex.input.trim() && ex.output.trim());
            if (validExamples.length > 0) {
                prompt += `--- EXAMPLE ---\n`;
                prompt += `Here is an example of the expected input-output pattern:\n\n`;
                validExamples.forEach((ex) => {
                    prompt += `[INPUT]:\n${ex.input}\n`;
                    prompt += `[OUTPUT]:\n${ex.output}\n\n`;
                });
            }
            prompt += `--- TASK ---\n`;
            prompt += `Given the goal, context, rules, and example, process the following input.\n\n`;
            prompt += `[FINAL INPUT]:\n${finalInput || "{Your final input for the LLM goes here}"}`;
            setGeneratedPrompt(prompt);
        };
        buildPrompt();
    }, [objective, domain, format, constraints, examples, finalInput]);

    // --- HANDLERS ---
    const handleConstraintChange = (e) => {
        const { name, value } = e.target;
        setConstraints(prev => ({ ...prev, [name]: value }));
    };

    const handleExampleChange = (e) => {
        const { name, value } = e.target;
        if (examples.length > 0) {
            setExamples([{ ...examples[0], [name]: value }]);
        } else {
            setExamples([{ input: name === 'input' ? value : '', output: name === 'output' ? value : '' }]);
        }
    };
    
    const loadTemplate = (template) => {
        setObjective(template.settings.objective);
        setFormat(template.settings.format);
        setConstraints(template.settings.constraints);
        setExamples([template.example]);
        setDomain('');
        setFinalInput('');
        setWizardMessage(`Great! I've set up a prompt for **${template.name}**. I've defined the Goal, set some Rules, and provided an Example. Now, just add your content in Step 4.`);
        setWizardStep(1);
    };
    
    const startFromScratch = () => {
        setObjective('');
        setDomain('');
        setFormat('Markdown');
        setConstraints({ tone: 'Neutral', persona: 'An Expert', wordLimit: '' });
        setExamples([]);
        setFinalInput('');
        setWizardMessage("You're starting from scratch. Fill in the sections below to build your prompt.");
        setWizardStep(1);
    };

    const handleCopyToClipboard = () => {
        const el = document.createElement('textarea');
        el.value = generatedPrompt;
        document.body.appendChild(el);
        el.select();
        try {
            document.execCommand('copy');
            setShowCopySuccess(true);
            setTimeout(() => setShowCopySuccess(false), 2000);
        } catch (err) {
            setError('Failed to copy text.');
        }
        document.body.removeChild(el);
    };

    // --- API CALLS ---
    const callGeminiAPI = async (prompt) => {
        const apiKey = "";
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
        const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
        const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        if (!response.ok) throw new Error(`API request failed with status ${response.status}`);
        const result = await response.json();
        if (result.candidates?.[0]?.content?.parts?.[0]) {
            return result.candidates[0].content.parts[0].text;
        } else {
            throw new Error('No content received from the model.');
        }
    };

    const handleGenerateExample = async () => {
        if (!objective) {
            setError("Please state a goal first. The AI needs to know what the example should be about.");
            return;
        }
        setError('');
        setIsGeneratingExample(true);
        const metaPrompt = `You are a prompt engineering assistant. Your task is to help a user create a high-quality example for a prompt.

The user's goal is: "${objective}"
The desired output format is: "${format}"

Based on this goal and format, generate a sample input and a sample output. The example should be clear, concise, and perfectly illustrate the desired task.

Return your response as a single, clean JSON object with two keys: "sampleInput" and "sampleOutput". Do not include any other text or explanations.`;

        try {
            let responseText = await callGeminiAPI(metaPrompt);
            const jsonMatch = responseText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                responseText = jsonMatch[0];
            }
            const parsedResponse = JSON.parse(responseText);
            if (parsedResponse.sampleInput && parsedResponse.sampleOutput) {
                setExamples([{ input: parsedResponse.sampleInput, output: parsedResponse.sampleOutput }]);
            } else {
                throw new Error("AI response did not contain the expected format.");
            }
        } catch (err) {
            setError(`The AI couldn't generate an example. This can happen with very complex goals. Please try refining your goal or creating an example manually. Error: ${err.message}`);
        } finally {
            setIsGeneratingExample(false);
        }
    };

    const handleTestRun = async () => {
        if (!objective) {
            setError('Please state a goal before running a test.');
            return;
        }
        if (!finalInput) {
            setError('Please provide your content in Step 4 before running a test.');
            return;
        }
        setError('');
        setIsLoading(true);
        setTestResult('');
        try {
            const resultText = await callGeminiAPI(generatedPrompt);
            setTestResult(resultText);
        } catch (err) {
            setError(`An error occurred during the test run: ${err.message}`);
        } finally {
            setIsLoading(false);
        }
    };
    
    // --- Drag and Drop Handlers ---
    const handleDragStart = (e, position) => {
        dragItem.current = position;
    };

    const handleDragEnter = (e, position) => {
        dragOverItem.current = position;
    };
    
    const handleDrop = (e) => {
        const newTemplates = [...templates];
        const dragItemContent = newTemplates[dragItem.current];
        newTemplates.splice(dragItem.current, 1);
        newTemplates.splice(dragOverItem.current, 0, dragItemContent);
        dragItem.current = null;
        dragOverItem.current = null;
        setTemplates(newTemplates);
    };
    
    const templatesToShow = showAllTemplates ? templates : templates.slice(0, 3);

    // --- RENDER ---
    return (
        <>
            <style>{`
                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
                body { font-family: 'Inter', sans-serif; }
                ::-webkit-scrollbar { width: 8px; }
                ::-webkit-scrollbar-track { background: #1e293b; }
                ::-webkit-scrollbar-thumb { background: #475569; border-radius: 4px; }
                ::-webkit-scrollbar-thumb:hover { background: #64748b; }
            `}</style>
            
            <div aria-live="assertive" className="fixed inset-0 flex items-end px-4 py-6 pointer-events-none sm:p-6 sm:items-start z-50">
                <div className="w-full flex flex-col items-center space-y-4 sm:items-end">
                    {showCopySuccess && (
                        <div className="max-w-sm w-full bg-green-500 shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden">
                            <div className="p-4"><div className="flex items-start"><div className="flex-shrink-0"><svg className="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg></div><div className="ml-3 w-0 flex-1 pt-0.5"><p className="text-sm font-medium text-white">Prompt copied to clipboard!</p></div></div></div>
                        </div>
                    )}
                </div>
            </div>

            <div className="bg-slate-900 text-slate-300 min-h-screen">
                <header className="bg-slate-800/70 backdrop-blur-lg p-4 shadow-lg sticky top-0 z-40 border-b border-slate-700">
                    <div className="max-w-7xl mx-auto flex justify-between items-center">
                        <div className="flex-1"></div>
                        <div className="flex-1 text-center">
                            <h1 className="text-2xl font-bold text-green-400">The AI Prompt Studio</h1>
                            <p className="text-slate-400 text-sm whitespace-nowrap">Master the art of prompt engineering with a guided, educational workflow.</p>
                        </div>
                        <div className="flex-1 flex justify-end">
                             <button 
                                onClick={() => setShowUserGuide(true)} 
                                className="p-2 px-4 bg-transparent border border-sky-400/50 hover:border-sky-300 text-sky-400 hover:text-sky-300 rounded-md transition text-sm font-semibold shadow-sm"
                                aria-label="User Guide"
                            >
                                User Guide
                            </button>
                        </div>
                    </div>
                </header>

                <main className="p-4 md:p-8 max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <div className="space-y-8">
                        {wizardStep === 0 && (
                            <div className="bg-slate-800/50 p-6 rounded-lg shadow-2xl border border-slate-700">
                                <h2 className="text-2xl font-bold text-green-300">Let's build a prompt!</h2>
                                <p className="text-lg text-slate-400 mt-2 mb-6">What kind of prompt do you want to build today?</p>
                                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                    {templatesToShow.map((template, index) => (
                                        <div 
                                            key={template.id}
                                            className="relative"
                                            draggable
                                            onDragStart={(e) => handleDragStart(e, index)}
                                            onDragEnter={(e) => handleDragEnter(e, index)}
                                            onDragEnd={handleDrop}
                                            onDragOver={(e) => e.preventDefault()}
                                        >
                                            <div className="absolute top-2 right-2 text-slate-500 z-10 p-1"><DragHandleIcon /></div>
                                            <button onClick={() => loadTemplate(template)} className="text-left p-4 bg-green-600/10 hover:bg-green-600/20 rounded-md transition border border-green-500/30 h-full flex flex-col w-full">
                                                <h3 className="font-bold text-green-300">{template.name}</h3>
                                                <p className="text-sm text-slate-400 mt-1 flex-grow">{template.description}</p>
                                            </button>
                                        </div>
                                    ))}
                                </div>
                                <div className="mt-6 text-center">
                                    {!showAllTemplates && (
                                        <button onClick={() => setShowAllTemplates(true)} className="p-2 px-4 bg-sky-600 hover:bg-sky-500 rounded-md transition text-sm font-semibold text-white shadow-md mr-4">
                                            Show More Templates
                                        </button>
                                    )}
                                    <button onClick={startFromScratch} className="p-2 px-4 bg-slate-600 hover:bg-slate-500 rounded-md transition text-sm font-semibold text-white shadow-md">
                                        Or, Start From Scratch
                                    </button>
                                </div>
                            </div>
                        )}

                        {wizardStep === 1 && (
                            <>
                                <div className="bg-slate-800/50 p-4 rounded-lg border border-green-500/30 flex justify-between items-center">
                                    <p className="text-green-200"><SanitizeMessage text={wizardMessage} /></p>
                                    <div>
                                        <button onClick={() => { setWizardStep(0); setShowAllTemplates(false); }} className="text-sm text-sky-400 hover:text-sky-300 mr-4">‹ Back</button>
                                        <button onClick={startFromScratch} className="text-sm text-sky-400 hover:text-sky-300">Start Over</button>
                                    </div>
                                </div>

                                <div id="goal-section" className="bg-slate-800/50 p-6 rounded-lg shadow-2xl border border-slate-700">
                                    <div className="flex items-center gap-2"><h2 className="text-xl font-semibold text-green-300">1. State Your Goal</h2><Tooltip text="Tell the AI what you want to achieve. Be specific. A clear goal is the foundation of a good prompt."><InfoIcon /></Tooltip></div>
                                    <div className="space-y-4 mt-4">
                                        <div>
                                            <div className="flex items-center gap-2 mb-1"><label htmlFor="objective" className="block text-sm font-medium text-slate-400">Goal / Objective</label><Tooltip text="Be as specific as possible. Instead of 'write about cars,' try 'write a blog post comparing the fuel efficiency of hybrid vs. electric cars'."><InfoIcon /></Tooltip></div>
                                            <textarea id="objective" value={objective} onChange={(e) => setObjective(e.target.value)} className="w-full p-3 bg-slate-700 rounded-md border border-slate-600 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition focus:ring-offset-2 focus:ring-offset-slate-900" placeholder="e.g., Summarize technical documents into a 3-point bullet list..." rows="3"></textarea>
                                        </div>
                                        <div>
                                            <div className="flex items-center gap-2 mb-1"><label htmlFor="domain" className="block text-sm font-medium text-slate-400">Context / Domain</label><Tooltip text="Is this for a specific industry? Mentioning 'legal' or 'medical' helps the AI use the correct terminology."><InfoIcon /></Tooltip></div>
                                            <input type="text" id="domain" value={domain} onChange={(e) => setDomain(e.target.value)} className="w-full p-3 bg-slate-700 rounded-md border border-slate-600 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition focus:ring-offset-2 focus:ring-offset-slate-900" placeholder="e.g., Medical, Legal, Software Engineering" />
                                        </div>
                                    </div>
                                </div>

                                <div id="rules-section" className="bg-slate-800/50 p-6 rounded-lg shadow-2xl border border-slate-700">
                                     <div className="flex items-center gap-2"><h2 className="text-xl font-semibold text-green-300">2. Set the Rules</h2><Tooltip text="Define the output format, style, and length. This helps the AI give you exactly what you need."><InfoIcon /></Tooltip></div>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                                        <div>
                                            <div className="flex items-center gap-2 mb-1"><label htmlFor="format" className="block text-sm font-medium text-slate-400">Output Format</label><Tooltip text="Choose the structure for the AI's response. 'JSON' is for data, 'Narrative' is for prose."><InfoIcon /></Tooltip></div>
                                            <select name="format" id="format" value={format} onChange={(e) => setFormat(e.target.value)} className="w-full p-3 bg-slate-700 rounded-md border border-slate-600 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition focus:ring-offset-2 focus:ring-offset-slate-900">
                                                <option>Markdown</option><option>Bullet List</option><option>Narrative</option><option>JSON</option><option>XML</option><option>YAML</option><option>CSV</option><option>HTML</option><option>Python Code</option>
                                            </select>
                                        </div>
                                        <div>
                                            <div className="flex items-center gap-2 mb-1"><label htmlFor="tone" className="block text-sm font-medium text-slate-400">Tone</label><Tooltip text="Select the attitude or feeling you want the AI to convey."><InfoIcon /></Tooltip></div>
                                            <select name="tone" id="tone" value={constraints.tone} onChange={handleConstraintChange} className="w-full p-3 bg-slate-700 rounded-md border border-slate-600 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition focus:ring-offset-2 focus:ring-offset-slate-900">
                                                <option>Neutral</option><option>Formal</option><option>Casual</option><option>Humorous</option><option>Empathetic</option><option>Energetic</option><option>Dramatic</option><option>Informative</option><option>Technical</option><option>Friendly</option><option>Boisterous</option><option>Creative</option>
                                            </select>
                                        </div>
                                        <div>
                                            <div className="flex items-center gap-2 mb-1"><label htmlFor="persona" className="block text-sm font-medium text-slate-400">Persona</label><Tooltip text="Who should the AI pretend to be? 'A Pirate Captain' will give very different results than 'A Helpful Assistant'."><InfoIcon /></Tooltip></div>
                                            <input type="text" name="persona" id="persona" value={constraints.persona} onChange={handleConstraintChange} className="w-full p-3 bg-slate-700 rounded-md border border-slate-600 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition focus:ring-offset-2 focus:ring-offset-slate-900" placeholder="e.g., A Helpful Assistant" />
                                        </div>
                                        <div>
                                            <div className="flex items-center gap-2 mb-1"><label htmlFor="wordLimit" className="block text-sm font-medium text-slate-400">Word Limit</label><Tooltip text="Give an approximate word count to control the length of the response. This is a guideline, not a strict limit."><InfoIcon /></Tooltip></div>
                                            <input type="number" name="wordLimit" id="wordLimit" value={constraints.wordLimit} onChange={handleConstraintChange} className="w-full p-3 bg-slate-700 rounded-md border border-slate-600 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition focus:ring-offset-2 focus:ring-offset-slate-900" placeholder="e.g., 200" />
                                        </div>
                                    </div>
                                </div>

                                <div id="example-section" className="bg-slate-800/50 p-6 rounded-lg shadow-2xl border border-slate-700">
                                    <div className="flex items-center gap-2"><h2 className="text-xl font-semibold text-green-300">3. Show an Example</h2><Tooltip text="'Showing' is more powerful than 'telling'. Provide one clear example of the input and the exact output you want."><InfoIcon /></Tooltip></div>
                                    {examples.length > 0 ? (
                                        <div className="mt-4 space-y-2">
                                            <div>
                                                <div className="flex items-center gap-2 mb-1"><label htmlFor="example-input" className="block text-sm font-medium text-slate-400">Example Input</label><Tooltip text="Provide a sample piece of text that the AI would receive. This is what your prompt will act upon."><InfoIcon /></Tooltip></div>
                                                <textarea name="input" id="example-input" value={examples[0].input} onChange={handleExampleChange} className="w-full p-2 bg-slate-600 rounded-md border border-slate-500 focus:ring-1 focus:ring-green-500 focus:border-green-500" placeholder="Example Input" rows="3"></textarea>
                                            </div>
                                            <div>
                                                <div className="flex items-center gap-2 mb-1"><label htmlFor="example-output" className="block text-sm font-medium text-slate-400">Expected Output</label><Tooltip text="Show the AI exactly what the finished product should look like based on the 'Example Input'. This is the most powerful way to get a specific format."><InfoIcon /></Tooltip></div>
                                                <textarea name="output" id="example-output" value={examples[0].output} onChange={handleExampleChange} className="w-full p-2 bg-slate-600 rounded-md border border-slate-500 focus:ring-1 focus:ring-green-500 focus:border-green-500" placeholder="Expected Output" rows="5"></textarea>
                                            </div>
                                        </div>
                                     ) : (
                                        <div className="mt-4 text-center p-4 bg-slate-700/30 rounded-md border border-dashed border-slate-600">
                                            <p className="text-sm text-slate-400 mb-4">Need help creating an example? Make sure you've set a goal, then let the AI assist you.</p>
                                            <button onClick={handleGenerateExample} disabled={isGeneratingExample} className="p-2 px-4 bg-sky-600 hover:bg-sky-500 rounded-md transition text-sm font-semibold text-white shadow-md flex items-center justify-center gap-2 mx-auto disabled:bg-slate-500 disabled:cursor-not-allowed">
                                                {isGeneratingExample ? 'Generating...' : <><SparkleIcon /> Help Me Create an Example</>}
                                            </button>
                                        </div>
                                     )}
                                </div>
                                
                                <div id="final-input-section" className="bg-slate-800/50 p-6 rounded-lg shadow-2xl border border-slate-700">
                                    <div className="flex items-center gap-2"><h2 className="text-xl font-semibold text-green-300">4. Provide Your Content</h2><Tooltip text="This is the final, most important step. Paste the text, data, or question you want the AI to process here."><InfoIcon /></Tooltip></div>
                                    <div className="mt-4">
                                        <div className="flex items-center gap-2 mb-1">
                                            <label htmlFor="final-input" className="block text-sm font-medium text-slate-400">Your Input Text / Data</label>
                                            <Tooltip text="The content you put here will be automatically added to the final prompt."><InfoIcon /></Tooltip>
                                        </div>
                                        <textarea id="final-input" value={finalInput} onChange={(e) => setFinalInput(e.target.value)} className="w-full p-3 bg-slate-700 rounded-md border border-slate-600 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition focus:ring-offset-2 focus:ring-offset-slate-900" placeholder="Paste the content you want the AI to work on here..." rows="5"></textarea>
                                    </div>
                                </div>
                            </>
                        )}
                    </div>

                    <div className="bg-slate-800/50 p-6 rounded-lg shadow-2xl flex flex-col border border-slate-700 sticky top-24 h-[calc(100vh-8rem)]">
                        <h2 className="text-xl font-semibold mb-4 border-b border-slate-700 pb-2 text-green-300">Generated Prompt & Test</h2>
                        <div className="flex-grow bg-slate-900 p-4 rounded-md overflow-auto border border-slate-700 mb-4 relative">
                            <pre className="whitespace-pre-wrap text-sm text-slate-300">{generatedPrompt}</pre>
                        </div>
                        <button onClick={handleCopyToClipboard} className="w-full p-3 mb-4 bg-green-600 hover:bg-green-500 rounded-md transition font-bold text-lg text-white shadow-lg flex items-center justify-center gap-2"><CopyIcon /> Copy Prompt</button>
                        <button onClick={handleTestRun} disabled={isLoading || wizardStep === 0} className="w-full p-3 mb-4 bg-indigo-600 hover:bg-indigo-500 rounded-md transition font-bold text-lg text-white shadow-lg disabled:bg-slate-500 disabled:cursor-not-allowed">{isLoading ? 'Simulating...' : 'Run Test'}</button>
                        {error && <div className="bg-red-500/20 border border-red-500/30 text-red-300 p-3 rounded-md mb-4 text-sm">{error}</div>}
                        <div className="flex-grow bg-slate-900 p-4 rounded-md overflow-auto border border-slate-700">
                            <h3 className="text-lg font-medium text-slate-300 mb-2">Test Result:</h3>
                            {isLoading ? (<div className="flex justify-center items-center h-full"><div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-400"></div></div>) : (<pre className="whitespace-pre-wrap text-sm text-slate-300">{testResult || "The model's response will appear here."}</pre>)}
                        </div>
                    </div>
                </main>
                <footer className="text-center p-4 text-slate-500 text-sm">
                    For more powerful, practical AI solutions connect with me
                    <a href="https://www.linkedin.com/in/michaelcina/" target="_blank" rel="noopener noreferrer" className="underline mx-1 cursor-pointer text-sky-400 hover:text-sky-300">Michael Cina</a>
                    | <button onClick={() => setShowDisclaimer(true)} className="underline mx-1 cursor-pointer text-sky-400 hover:text-sky-300">Disclaimer</button>
                </footer>
            </div>

            {showDisclaimer && (
                <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
                    <div className="bg-slate-800 p-8 rounded-lg shadow-2xl max-w-2xl w-full border border-slate-700 relative">
                        <button onClick={() => setShowDisclaimer(false)} className="absolute top-2 right-4 text-3xl font-bold cursor-pointer text-slate-400 hover:text-white">&times;</button>
                        <h2 className="text-2xl font-bold text-green-300 mb-4">Disclaimer</h2>
                        <div className="space-y-4 text-sm leading-relaxed text-slate-300 max-h-[70vh] overflow-y-auto">
                            <div>
                                <h3 className="text-lg font-semibold text-green-400 mb-1">1. Purpose of the Tool</h3>
                                <p>By using this tool you agree to the terms of this Disclaimer. If you do not agree to this Disclaimer, please do not use this tool. The AI Prompt Studio is an experimental tool designed to assist users in creating summarization prompts for use with third-party Large Language Models (LLMs).</p>
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold text-green-400 mb-1">2. No Guarantee of Output</h3>
                                <p>Michael Cina has no control over the output generated by third-party AI services. The accuracy of the summary, decisions, and action items is not guaranteed. Always cross-reference the AI's output with the original transcript for critical tasks.</p>
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold text-green-400 mb-1">3. Not Professional Advice</h3>
                                <p>This tool does not provide project management or business advice or advice of any kind. It is for informational and assistive purposes only.</p>
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold text-green-400 mb-1">4. User Responsibility and Data Security</h3>
                                <p>You are solely responsible for the data you input. <strong>You warrant that you have all necessary consents and rights to provide the input. Do not enter any sensitive, confidential, proprietary, or personal information.</strong> The prompts and transcripts you submit will be processed by third-party AI services according to their respective terms and privacy policies.</p>
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold text-green-400 mb-1">5. "As-Is" Provision and Limitation of Liability</h3>
                                <p>This tool is provided "as-is" without any warranties. In no event shall Michael Cina be liable for any claim or damages arising from the use of this tool, including reliance on any outputs.</p>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {showUserGuide && (
                 <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
                    <div className="bg-slate-800 p-8 rounded-lg shadow-2xl max-w-3xl w-full border border-slate-700 relative">
                        <button onClick={() => setShowUserGuide(false)} className="absolute top-3 right-5 text-3xl font-bold cursor-pointer text-slate-400 hover:text-white">&times;</button>
                        <div className="space-y-6 text-slate-300 max-h-[80vh] overflow-y-auto pr-6">
                           <h1 className="text-3xl font-bold text-green-400">The AI Prompt Studio: User Guide</h1>
                            <p className="text-slate-400">Welcome to The AI Prompt Studio! This guide will walk you through everything you need to know to go from an idea to a powerful, precise AI prompt.</p>
                            <hr className="border-slate-700" />
                            <h2 className="text-2xl font-semibold text-green-300 pt-2">Quick Start: Your First Prompt in 60 Seconds</h2>
                            <ol className="list-decimal list-inside space-y-4 mt-2 pl-2">
                                <li><strong>Choose a Template:</strong> On the starting screen, click a template that matches your task, like <strong className="text-sky-400">"Summarize Text."</strong></li>
                                <hr className="border-slate-700/50" />
                                <li><strong>Review the Setup:</strong> The app automatically fills out the three core sections for you: <strong>Goal</strong>, <strong>Rules</strong>, and <strong>Example</strong>.</li>
                                <hr className="border-slate-700/50" />
                                <li><strong>Provide Your Content:</strong> Go to <strong>Step 4: Provide Your Content</strong> and paste in the text you want the AI to work on.</li>
                                <hr className="border-slate-700/50" />
                                <li><strong>Test and Copy:</strong> The "Generated Prompt" on the right is now complete. Click <strong className="text-sky-400">"Run Test"</strong> for a preview or <strong className="text-sky-400">"Copy Prompt"</strong> to use it anywhere.</li>
                            </ol>
                            <hr className="border-slate-700" />
                            <h2 className="text-2xl font-semibold text-green-300 pt-2">The Three Core Concepts</h2>
                            <p>A perfect prompt has three parts. Mastering them is the key to getting great results.</p>
                            <div className="mt-4 space-y-4">
                                <div>
                                    <h3 className="text-xl font-semibold text-sky-400">1. State Your Goal (The "What")</h3>
                                    <p>This is the most important step. A clear and specific goal is the foundation of a good prompt.</p>
                                    <div className="mt-2 p-3 bg-slate-700/50 rounded-md border-l-4 border-slate-600">
                                        <p className="font-semibold text-slate-400">Weak Goal:</p>
                                        <p>"Write about cars."</p>
                                        <p className="font-semibold text-slate-400 mt-2">Strong Goal:</p>
                                        <p>"Write a blog post comparing the fuel efficiency of hybrid vs. electric cars for city driving."</p>
                                    </div>
                                </div>
                                <div>
                                    <h3 className="text-xl font-semibold text-sky-400">2. Set the Rules (The "How")</h3>
                                    <p>This is where you control the output. You can define the <strong>format</strong> (like a bullet list or JSON), the <strong>tone</strong> (Formal, Casual, etc.), and the <strong>persona</strong> (who the AI should pretend to be).</p>
                                </div>
                                <div>
                                    <h3 className="text-xl font-semibold text-sky-400">3. Show an Example (The "Show, Don't Just Tell")</h3>
                                    <p>This is the most powerful technique in prompt engineering (also known as <strong className="text-sky-400">Few-Shot Learning</strong>). By providing a clear example of an input and the exact output you want, you train the AI on your specific needs.</p>
                                </div>
                            </div>
                             <hr className="border-slate-700" />
                            <h2 className="text-2xl font-semibold text-green-300 pt-2">Frequently Asked Questions (FAQ)</h2>
                            <div className="mt-4 space-y-4">
                                <div>
                                    <h3 className="text-xl font-semibold text-sky-400">What's the difference between Step 1 (Goal) and Step 4 (Your Content)?</h3>
                                    <p><strong>Step 1</strong> is the <strong>instruction</strong> (e.g., "Summarize this article"). <strong>Step 4</strong> is the <strong>content</strong> the instruction acts on (e.g., the actual article text).</p>
                                </div>
                                <div>
                                    <h3 className="text-xl font-semibold text-sky-400">Do I always need to provide content in Step 4?</h3>
                                    <p>Not always. If your goal is to generate something new (like "Brainstorm ideas for a new app"), the goal *is* the content. In these cases, you can leave Step 4 blank.</p>
                                </div>
                                <div>
                                    <h3 className="text-xl font-semibold text-sky-400">What if the AI-generated example isn't quite right?</h3>
                                    <p>That's perfectly normal! The AI assistant is there to give you a starting point. You can—and should—edit the example it provides to make it a perfect match for your needs.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
};

export default App;
